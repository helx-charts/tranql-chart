# -- Image repository
image: helxplatform/tranql
# --  Overrids default is Chart.appversion image tag
imageTagOverride: ""
# -- (int) Number of tranql webserver replicas
replicas: 1
# -- (int) Tranql web server port
port: 8081
gunicorn:
  # -- (int) Gunicorn worker count
  workerCount: 4
  # -- (int) Gunicorn worker timeout
  workerTimeout: 1600
service:
  # -- (string) Tranql k8s service type
  type: ClusterIP

# -- Resources for Tranql containers
resources:
  requests:
    cpu: 250m
    memory: 2Gi
  limits:
    cpu: 1000m
    memory: 5Gi

# -- Tranql query timeout sent to redis in milliseconds
tranql_redis_query_timeout: 10000 # 10 secs

# -- Existing redis configuration, if used this will take presidence over redis connection deployed by enabling redis.
existingRedis:
  host: ""
  port: ""
  password: ""
  secret: ""
  secretPasswordKey: ""
# Ingress Configuration
ingress:
  pathType: ImplementationSpecific
  annotations:
   nginx.ingress.kubernetes.io/enable-cors: "true"
   cert-manager.io/cluster-issuer: letsencrypt
  enabled: false
  tls:
    secretName: ""
  host: ""

redis:
  enabled: true
  commonConfiguration: |-
    appendonly no
  usePassword: true
  clusterDomain: cluster.local
  image:
    repository: redislabs/redisgraph
    tag: 2.8.4
  auth:
    enable: true
    password: "changeme"
  master:
    persistence:
      size: 15Gi
    initContainers:
     - name: init-db
       image: busybox
       securityContext:
          runAsUser: 1001
          runAsGroup: 1001
       command:
         - "wget"
       args:
         - "https://stars.renci.org/var/kgx_data/roger_graph_v3.0.rdb"
         - "-O"
         - "/data/dump.rdb"
       volumeMounts:
       - name: redis-data
         mountPath: /data
    resources:
      requests:
        memory: 12Gi
        cpu: 200m
      limits:
        memory: 15Gi
        cpu: 1000m
    command: ""
    readinessProbe:
      enabled: true
      # to make it available ASAP
      periodSeconds: 1
      # spans 25 mins (150 * 10 secs)
      failureThreshold: 1
    livenessProbe:
      # Liveliness probes can be off, since
      # With big cache data to load or sync , redis is alive but
      # responds with LOADING message. to avoid cyclic restarts
      # keeping this off
      enabled: false
    extraFlags:
      - "--loadmodule"
      - "/usr/lib/redis/modules/redisgraph.so"
      - "THREAD_COUNT"
      - "8"
      - "OMP_THREAD_COUNT"
      - "16"
      - "--appendonly"
      - "no"
  replica:
#    replicaCount: 1
    persistence:
      size: 15Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPU: 100
    resources:
      requests:
        memory: 12Gi
        cpu: 1000m
      limits:
        memory: 15Gi
        cpu: 2000m
    extraFlags:
      - "--loadmodule"
      - "/usr/lib/redis/modules/redisgraph.so"
      - "THREAD_COUNT"
      - "8"
      - "OMP_THREAD_COUNT"
      - "16"
    readinessProbe:
      enabled: true
      # to make it available ASAP
      periodSeconds: 1
      # Having a lower count will make sure that routing to a replica that
      # is not ready yet to not be routed to.
      failureThreshold: 1
      # make sure its really ready
      successThreshold: 5
    livenessProbe:
      enabled: false
